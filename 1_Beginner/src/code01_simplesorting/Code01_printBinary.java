package code01_simplesorting;


/*打印2进制的int的数字*/
public class Code01_printBinary {

    public static void main(String[] args) {
        //所有十进制的数字其实底层都是32位 2进制构成
        //int 是 32 ； long 是 64
        int num = 34235;//00000000000000001000010110111011
        print(num);

        intBinary();

        print(-1);
        //11111111111111111111111111111111
        //1.第一个1是 符号位 「1：表示负数，0表示正数」
        //2.后面的31位 取反「符号：～」 加1 就会变成 0000000000000000000000000000000
        //3.两者结合 就是 -1


        printNegation(213123);
        //00000000000000110100000010000011
        //11111111111111001011111101111100

        print(Integer.MAX_VALUE);
        //01111111111111111111111111111111    0 ～ 2^31-1
        print(Integer.MIN_VALUE);
        //10000000000000000000000000000000    -2^31 ～ -1

        /*
         * 在所有的底层，所有的加减乘除都是通过位运算来实现的
         * 四个运算 就是 四套 位运算的逻辑
         * 为了更好的实现这四套实现，都是就使用 取反+1 来实现这套逻辑
         * */


        int a = 1234567;
        int b = 3243555;
        print(a);
        print(b);
        System.out.println("===========");
        print(a | b);
        print(a & b);
        print(a ^ b);
        //00000000000100101101011010000111
        //00000000001100010111111000100011
        //===========
        //00000000001100111111111010100111
        //00000000000100000101011000000011
        //00000000001000111010100010100100


        /*右移动 左移动*/
        // >> 带符号向右移动 ； >>> 不带符号向右移动
        //1.如果是正数的话其实是一样的
        //2.如果是负数的话就会不一样
        int d = Integer.MIN_VALUE;
        print(d);
        print(d >> 1);
        print(d >>>1);
        //10000000000000000000000000000000
        //11000000000000000000000000000000
        //01000000000000000000000000000000





        /* ~N+1 = -N*/
        int e =5;
        int f = ~e + 1 ;
        int g = ~f + 1 ;
        System.out.println(e);
        System.out.println(f);
        System.out.println(g);
        //5
        //-5
        //5
        //推断过程
        print(5); //5
        print(~5);// ～5
        print(~5 +1);// ～5 +1 「-5」
        //00000000000000000000000000000101
        //11111111111111111111111111111010
        //11111111111111111111111111111011

        print(-5);//-5
        print(~(-5));//～（-5）
        print(~(-5)+1);//～（-5）「5」
        //11111111111111111111111111111011
        //00000000000000000000000000000100
        //00000000000000000000000000000101

        //总结 ： -5 和 5 对于位运算来说 互相转换都可以采用 （～n+1 ）来实现，可以采用一套逻辑
        //实现了可以采用一套逻辑，那在底层就非常的正常

        /*int 最小值 取反*/
        int h =Integer.MIN_VALUE;
        int k = -h;
        System.out.println(h);
        System.out.println(k);
        print(h);
        print(k);
        //-2147483648
        //-2147483648
        //10000000000000000000000000000000
        //10000000000000000000000000000000
        //注意：0取反之后都是1，加1 之后就会溢出 还会变成0



    }


    //1.int 数字在计算机底层都是32位 2进制
    //2.1 << i  ： 1在32位二进制的数字位 00000000000000000000000000000001  ，一开始是向右移动31位，就是在第32位
    //3.num & (1 << i) ： 拿着1 从右开始往左边开始移动 ，是1打印就是1
    public static void print(int num) {
        for (int i = 31; i >= 0; i--) {
            System.out.print(((num & (1 << i)) == 0 ? "0" : "1"));
        }
        System.out.println();
    }


    //无符号整型 ： 0 ～ 2^31-1
    //有符号整型 ： -2^31 ～  2^31-1
    public static void intBinary() {
        int numMax = Integer.MAX_VALUE;
        print(numMax);//01111111111111111111111111111111
        int numMIn = Integer.MIN_VALUE;
        print(numMIn);//10000000000000000000000000000000
    }

    //取反
    public static void printNegation(int num) {
        print(num);
        print(~num);
    }


}


