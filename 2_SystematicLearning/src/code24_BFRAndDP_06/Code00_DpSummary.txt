1.什么暴力递归可以继续优化？
有重复调用同一个子问题的解，这种递归可以优化
如果每一个子问题都是不同的解，无法优化也不用优化


2.暴力递归和动态规划的关系？
某一个暴力递归，有解的重复调用，就可以把这个暴力递归 优化成动态规划
任何动态规划问题，都一定对应着某一个有重复过程的暴力递归
但不是所有的暴力递归，都一定对应着动态规划


3.面试题和动态规划的关系
解决一个问题，可能有很多尝试方法
可能在很多尝试方法中国，又有若干个尝试方法有动态规划的方法
一个问题 可能有 若干种动态规划的解法


4.如何找到某个问题的动态规划方式？
4.1.设计暴力递归：重要原则 + 4种常见尝试模型
    重要原则：看第五点
    4种常见尝试模型：「1.从左往右，要这个数或者不要这个数；2.范围尝试模型；3.业务限制模型 ；4.多样本位置全对应的尝试模型」
4.2.分析有没有重复解：套路解决
4.3.用记忆化搜索 -> 用严格表结构实现动态规划：套路解决
4.4.看看是否继续优化：存在枚举「即for循环」 ， 然后套路解决「判断依赖关系，然后进行位置压缩」


5.面试中设计暴力递归过程的原则
1.每一个可变参数的类型，一定不要比int类型更加复杂「就是突破了整型，比整型更加复杂」
2.原则1可以违反，让类型突破到一维线性结构，那必须是单一可变参数「贴纸问题」
3.如果发现原则1被违反，但不违反原则2，只需要做到记忆化搜索即可「贴纸问题」
4.可变参数的个数，能少则少


6.知道了面试中设计暴力递归过程的原则，然后呢？
如果找到的暴力尝试，不符合原则，马上舍弃，找新的
如果某个题目突破了设计原则，一定极其难，面试中出现的概率低于百分之5


7.如何分析有没有重复解
列出调用过程，可以只列出前几层
有没有重复解，一看便知


8.暴力递归到动态规划的套路
1.如果已经有了不违反原则的暴力递归，而且的确存在解的重复调用
2.找到 哪些参数的变会影响返回值，对每一个 列出变化范围
3.参数间的所有的组合数量，意味着表大小
4.记忆化搜索的方法就是傻缓存，非常容易得到
5.规定好严格表的大小，分析位置的依赖顺序，然后从基础填写到最终解
6.对于有枚举行为的决策过程，进一步优化



