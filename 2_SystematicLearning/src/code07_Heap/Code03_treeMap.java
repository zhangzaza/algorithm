package code07_Heap;

//二叉树的概念

//树的几种类型和进化过程以及概念
//1.二叉树（Binary Tree）：二叉树是一种每个节点最多有两个子节点的树结构
//2.二叉搜索树（Binary Search Tree, BST）：每个节点的左子树包含的所有节点都小于该节点，而右子树包含的所有节点都大于该节点
//3.平衡二叉树（Balanced Binary Tree）：平衡二叉树是一种二叉树，其任意节点的左右子树的高度差不超过一。
//4.红黑树（Red-Black Tree）：
//5.AVL树 ：
//概念：AVL树是一种自平衡二叉搜索树，每个节点记录其高度。
//特点：
//通过旋转操作保持平衡。
//任意节点的左右子树高度差不超过一。
//保证查找、插入和删除操作的时间复杂度为O(log n)。

/**
 * 完全二叉树的定义
 * 1.除了最后一层外，所有层的节点数目达到最大值，即每一层都被完全填满。
 * 2.最后一层节点的排列：最后一层的节点尽可能地从左到右排列，中间不留空缺。
 *
 * 数组表示法
 * 在完全二叉树的数组表示法中，有一种简单的方法来定位父节点和子节点：
 * 若节点的索引为 i:
 * 父节点的索引为 (i - 1) / 2。
 * 左子节点的索引为 2 * i + 1。
 * 右子节点的索引为 2 * i + 2。
 *
 * 例子：
 * 对于上面的例子，用数组表示为 [1, 2, 3, 4, 5, 6]，对应关系如下：
 * 节点1（索引0）是根节点。
 * 节点2（索引1）和节点3（索引2）是根节点的子节点。
 * 节点4（索引3）、节点5（索引4）和节点6（索引5）是第二层节点的子节点。
 * */
public class Code03_treeMap {


}
