package code39_DataVolumeLogarithmicAnalysis;


/// 给定一个正整数N，表示有N分青草统一堆放在仓库里
/// 有一只牛和一只羊，牛先吃，羊后吃，它俩轮流吃草
/// 不管是牛还是羊，每一轮能吃的草数量必须是 4 的某次方
/// 谁最先把草吃完，谁获胜
/// 假设牛和羊都决定聪明，都想赢，谁会做出理性的决定
/// 根据唯一的参数N，返回谁会赢
///
/// 注意：「因为都绝顶聪明，肯定只会有一个胜利者」
public class Code02_SheepAndCow {

    // 如果n份草，最终先手赢，返回“先手”
    // 如果n份草，最终后手赢，返回“后手”
    // 问题：want 会存在溢出的情况
    // 解决方法：
    //      1.将 int 类型 改成 long 类型
    //      2.  want *= 4; 外面包一层 if判断，如下所示
    public static String whoWin(int n) {
        if (n < 5) {
            return n == 0 || n == 2 ? "后手" : "先手";
        }
        //进到这个过程里来，当前的先手，先选
        int want = 1;

        while (want <= n) {
            // want n-want
            if (whoWin(n - want).equals("后手")) { // 下一次 的 先后手 中如果是后手赢，那就是这一次的先手赢
                return "先手";
            }

            //防止溢出
            if (want <= (n / 4)) {
                want *= 4;
            } else {
                break;
            }
        }
        return "后手";
    }


    /// 根据答案规律来解
    public static String whoWin2(int n) {
        if (n % 5 == 0 || n % 5 == 2) {
            return "后手";
        } else {
            return "先手";
        }
    }

    public static void main(String[] args) {
        for (int i = 0; i < 100; i++) {
            System.out.println(i + " : " + whoWin(i));
        }
//0 : 后手
//1 : 先手
//2 : 后手
//3 : 先手
//4 : 先手
//5 : 后手
//6 : 先手
//7 : 后手
//8 : 先手
//9 : 先手
//10 : 后手
//11 : 先手
//12 : 后手
//13 : 先手
//14 : 先手
//15 : 后手
//16 : 先手
//17 : 后手
//18 : 先手
//19 : 先手
//20 : 后手
//21 : 先手
//22 : 后手
//23 : 先手
//24 : 先手
//25 : 后手
//26 : 先手
//27 : 后手
//28 : 先手
//29 : 先手
//30 : 后手
//31 : 先手
//32 : 后手
//33 : 先手
//34 : 先手
//35 : 后手
//36 : 先手
//37 : 后手
//38 : 先手
//39 : 先手
//40 : 后手
//41 : 先手
//42 : 后手
//43 : 先手
//44 : 先手
//45 : 后手
//46 : 先手
//47 : 后手
//48 : 先手
//49 : 先手
//50 : 后手
//51 : 先手
//52 : 后手
//53 : 先手
//54 : 先手
//55 : 后手
//56 : 先手
//57 : 后手
//58 : 先手
//59 : 先手
//60 : 后手
//61 : 先手
//62 : 后手
//63 : 先手
//64 : 先手
//65 : 后手
//66 : 先手
//67 : 后手
//68 : 先手
//69 : 先手
//70 : 后手
//71 : 先手
//72 : 后手
//73 : 先手
//74 : 先手
//75 : 后手
//76 : 先手
//77 : 后手
//78 : 先手
//79 : 先手
    }


}
